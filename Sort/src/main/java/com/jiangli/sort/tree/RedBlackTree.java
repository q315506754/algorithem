package com.jiangli.sort.tree;

/**
 *
 *


 1.结点是红色或黑色。

 2.根结点是黑色。

 3.每个叶子结点都是黑色的空结点（NIL结点）。

 4 每个红色结点的两个子结点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色结点)

 5.从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点。

 特点：
根节点到叶子节点的最长路径不会超过最短路径2倍

 性能：
 插入速度比avl数快
 查找接近于OlogN

 变色&旋转

 插入： 插入节点为红色，最多两次旋转，比avl的递归调整效率高
 1 插入时为根节点，【变为】黑色
 2 插入时父节点为黑色，无需调整
 3 插入节点的父节点和叔叔节点都为红色，违反规则4，=>父节点变黑色，祖父节点变红色，叔叔变黑色
 4 插入节点的父节点是红色，叔叔为黑色或没有叔叔，且新节点是父节点的右孩子，父节点是祖父的左孩子（LR） => 对父节点左旋，进入局面5
 5 插入节点的父节点是红色，叔叔为黑色或没有叔叔，且新节点是父节点的左孩子，父节点是祖父的左孩子（LL） => 对祖父节点进行右旋，新根节点变黑色，老根节点变红，

 * @author Jiangli
 * @date 2020/5/11 15:10
 */
public class RedBlackTree {

}
