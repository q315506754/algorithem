一：走进Java
二：自动内存管理机制
    2.1 Java内存区域和内存溢出异常
        线程独立：虚拟机栈(栈帧（局部变量表、操作数栈、动态链接、方法出口）)、本地方法栈（Native）、程序计数器（无OutOfMemoryError）
        线程共享：方法区(class\constant\static\JIT code)、堆（对象和数组均在此获得内存-Xmx -Xms）
    2.2 垃圾回收器和内存分配策略
    2.3 虚拟机性能监控与故障处理工具
    2.4 调优案例分析与实战
三：虚拟机执行字系统
    3.1 类文件结构
    3.2 虚拟机类加载机制
        加载-》（验证-》准备-》解析）-》初始化-》使用-》卸载
    3.3 虚拟机字节码执行引擎
    3.4 类加载及执行子系统的案例与实战
四：程序编译及代码优化
    4.1 早期（编译器）优化
    4.2 晚期（运行期）优化
五：高效并发
    5.1 java内存模型与线程
    5.2 线程安全与锁优化


年轻代中的GC

    HotSpot JVM把年轻代分为了三部分：1个Eden区和2个Survivor区（分别叫from和to）。
    默认比例为8：1,为啥默认会是这个比例，接下来我们会聊到。
    一般情况下，新创建的对象都会被分配到Eden区(一些大对象特殊处理),这些对象经过第一次Minor GC后，
    如果仍然存活，将会被移到Survivor区。对象在Survivor区中每熬过一次Minor GC，年龄就会增加1岁，
    当它的年龄增加到一定程度时，就会被移动到年老代中。

因为年轻代中的对象基本都是朝生夕死的(80%以上)，所以在年轻代的垃圾回收算法使用的是复制算法，
复制算法的基本思想就是将内存分为两块，每次只用其中一块，当这一块内存用完，就将还活着的对象复制到另外一块上面。
复制算法不会产生内存碎片。

在GC开始的时候，对象只会存在于Eden区和名为“From”的Survivor区，Survivor区“To”是空的。
紧接着进行GC，Eden区中所有存活的对象都会被复制到“To”，而在“From”区中，仍存活的对象会根据他们的年龄值来决定去向。
年龄达到一定值(年龄阈值，可以通过-XX:MaxTenuringThreshold来设置)的对象会被移动到年老代中，
没有达到阈值的对象会被复制到“To”区域。经过这次GC后，Eden区和From区已经被清空。
这个时候，“From”和“To”会交换他们的角色，也就是新的“To”就是上次GC前的“From”，
新的“From”就是上次GC前的“To”。不管怎样，都会保证名为To的Survivor区域是空的。
Minor GC会一直重复这样的过程，直到“To”区被填满，“To”区被填满之后，会将所有对象移动到年老代中。


