二叉查找树  O logN
mysql为什么不用二叉查找树？磁盘id，索引非常大时，索引结点只能部分读取到磁盘页，IO次数由数高度决定
所以 高瘦 -> 矮胖 ，降低查找次数，这是B-树（多路平衡查找树 多路搜索树 n叉）特征，阶数由磁盘页大小决定

[link](https://mp.weixin.qq.com/s/SZ3QaDoa30IaQforWR1AXA)
下面来具体介绍一下B-树（Balance Tree），一个m阶的B树具有如下几个特征：
1.根结点至少有两个子女。
2.每个中间节点都包含k-1个元素和k个孩子，其中 m/2 <= k <= m  3阶（2,3）
3.每一个叶子节点都包含k-1个元素，其中 m/2 <= k <= m 3阶（2,3）
4.所有的叶子结点都位于同一层。
5.每个节点中的元素从小到大排列，节点当中k-1个元素正好是k个孩子包含的元素的值域分划。

自平衡，单点多比较，插入时连锁拆分，删除时连锁左旋

和二叉树比较：
比较次数并不比二叉树少，因为同一节点可能有多个元素；但加载到内存的磁盘IO次数减少了，这是由树的高度决定的。

==============================================================
https://www.cnblogs.com/George1994/p/7008732.html

一棵m阶的B+树和m阶的B-树的差异在于：
1.有n棵子树的结点中含有n个关键字，每个关键字不保存数据，只用来索引，所有数据都保存在叶子节点。
2.所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。
3.所有的非终端结点可以看成是索引部分，结点中仅含其子树（根结点）中的最大（或最小）关键字。


用途：
索引


B+树


和B-树比较比较：
B+树的磁盘读写代价更低
B+树的查询效率更加稳定


用途：
文件系统

==============================================================
https://blog.csdn.net/aqzwss/article/details/53074186
B*树 是B+树的变体，在B+树的非根和非叶子结点再增加指向兄弟的指针；

和B+树比较比较：
B*树定义了非叶子结点关键字个数至少为(2/3)*M，即块的最低使用率为2/3（代替B+树的1/2）
B*树分配新结点的概率比B+树要低，空间使用率更高；

==============================================================
https://blog.csdn.net/sun_tttt/article/details/65445754
红黑树 平衡二叉B树 非完美的平衡二叉树 （在动态插入中保持树的完美平衡代价太高， 稍微放松逛一下限制，希望找到一个能在对数时间内完成查找的数据结构。）
性质1. 节点是红色或黑色。
性质2. 根节点是黑色。
性质3 每个叶节点（NIL节点，空节点）是黑色的。
性质4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)
性质5. 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。

左旋 右旋

==============================================================

其他平衡树还有：AVL，SBT，伸展树，TREAP 等等。