【原型链
每一个实例对象，都有自己的属性和方法的副本。这不仅无法做到数据共享，也是极大的资源浪费。

这个属性包含一个对象（以下简称"prototype对象"），所有实例对象需要共享的属性和方法，都放在这个对象里面；
那些不需要共享的属性和方法，就放在构造函数里面。

实例对象一旦创建，将自动引用prototype对象的属性和方法。也就是说，实例对象的属性和方法，分成两种，一种是本地的，另一种是引用的。

由于所有的实例对象共享同一个prototype对象，那么从外界看起来，prototype对象就好像是实例对象的原型，
而实例对象则好像"继承"了prototype对象一样。


　function DOG(name){
　　　　this.name = name;
　　}
　　DOG.prototype = { species : '犬科' };

　　var dogA = new DOG('大毛');
　　var dogB = new DOG('二毛');

　　console.log(dogA.species); // 犬科
　　console.log(dogB.species); // 犬科
    DOG.prototype.species = '猫科';
　　console.log(dogA.species); // 猫科
　　console.log(dogB.species); // 猫科


    function CAT(name){
    　　this.name = name;
    }
    CAT.prototype = DOG.prototype;
    var catA = new DOG('cca');
    var catB = new DOG('ccb');
    console.log(catA.species); // 猫科
　　console.log(catB.species); // 猫科
     DOG.prototype.species = '喵咪科';
     console.log(catA.species); // 喵咪科
     console.log(catB.species); // 喵咪科
     console.log(dogA.species); // 喵咪科
     console.log(dogB.species); // 喵咪科

【闭包
Javascript语言特有的"链式作用域"结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。
闭包就是能够读取其他函数内部变量的函数。
因此可以把闭包简单理解成"定义在一个函数内部的函数"。
在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。
用途:
一个是前面提到的可以读取函数内部的变量，
另一个就是让这些变量的值始终保持在内存中。

原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，
因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收

注意点:
1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。
2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。



http://www.cnblogs.com/c3gen/p/6170504.html
【同步
【异步
Because even though setTimeout was called with a delay of zero, it's placed on a queue and scheduled to run at the next opportunity, not immediately. Currently executing code must complete before functions on the queue are executed, the resulting execution order may not be as expected.

翻译一下 就是 因为即使setTimeout调用延迟为零，这是放置在一个队列和调度运行到下一个机会，没有立即。当前正在执行的代码必须在队列上的函数执行之前完成，由此产生的执行顺序可能不会像预期的那样。
所以，可预料的结果是：直到在同一程序段中所有其余的代码执行结束后，超时才会发生。
所以如果设置了超时，同时执行了需长时间运行的函数，那么在该函数执行完成之前，超时甚至都不会启动。
实际上，异步函数，如setTimeout和setInterval，被压入了称之为Event Loop的队列。
有点扯远，记住就是setTimeout和setInterval可以改变一个队列函数的执行顺序。

JavaScript是单线程的。
为了利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。
于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。
同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；
异步任务指的是，不进入主线程、而进入"任务队列"（task queue）的任务，只有"任务队列"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。
（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。
（2）主线程之外，还存在一个"任务队列"（task queue）。只要异步任务有了运行结果，就在"任务队列"之中放置一个事件。
（3）一旦"执行栈"中的所有同步任务执行完毕，系统就会读取"任务队列"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。
（4）主线程不断重复上面的第三步。


【call bind apply


【canvas

【渲染,重排和重绘
网页的生成过程，大致可以分成五步。
HTML代码转化成DOM
CSS代码转化成CSSOM（CSS Object Model）
结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）
生成布局（layout），即将所有渲染树的所有节点进行平面合成
将布局绘制（paint）在屏幕上
这五步里面，第一步到第三步都非常快，耗时的是第四步和第五步。

window.requestAnimationFrame() 它可以将某些代码放到下一次重新渲染时执行。
window.requestIdleCallback()  它指定只有当一帧的末尾有空闲时间，才会执行回调函数。
            它还可以接受第二个参数，表示指定的毫秒数。如果在指定 的这段时间之内，每一帧都没有空闲时间，那么函数fn将会强制执行。





