grammar:
    control:
        seq:
        branch:
            if() .. else ...
            when(xx){
                exp -> rs
                exp -> rs
                exp -> rs
                else -> rs
            }
        loop:
            for(x in Iterable){x}  for(x in 1..100 step 2){x} (range, is Iterable)
            for (x in 9 downTo 0 step 3) {x}  (class kotlin.ranges.IntProgression)
            for(index in ArrayOrList.indices){index}
            while(exp){}
    cast:
        var x = aaa as X
    lambda:
    sugar:
         { c -> c in 'a'..'z' || c in 'A'..'Z'}
    operator: see KoanTest.kt:100
        operator fun invoke(): $className {}
            $instance()
        operator fun plus(b:Any):$className {}
            $instance+Any
        operator fun inc():MyDate {}
            $instance++
        operator fun unaryPlus() {}
            +$instance
        operator fun $className.times(number: Int):$className2 {}
            $instance2 = $instance*5
        override fun equals(other: Any?): Boolean {}
                $instance ==|!= Any
        override fun compareTo(other: MyDate): Int  (extends  Comparable<>)
            $instance1 > | < | = | >= ... $instance2
        operator fun $className.rangeTo(other: $className) {}
            val $$instanceRange = $instance1..$instance2

    class:
        extension:
            //public  not final
            open class Base(p: Int) {}
            //函数必须加上override标注才能重写父类方法
            class Derived(p: Int) : Base(p) {}
        generic:
            inline fun <reified T> membersOf() = T::class.members
                T is reified
        property:
            delegate:
                var p: String by Delegate()  ( extends ReadWriteProperty<R, MyDate> then override)
                    operator fun getValue(thisRef: Any?, prop: KProperty<*>): String
                    operator fun setValue(thisRef: Any?, prop: KProperty<*>, value: String)
                val lazy: String by lazy {...}
                var name: String by Delegates.observable(defaultValue) { d, old, new -> ...}
                var address: String by Delegates.notNull()
                lateinit var address:String
                class UserMap(val map: Map<String, Any?>) { val name: String by map
            set&get:
                val isEmpty: Boolean get() = this.counter == 0
    function invocation:
        fun a(a:string,b:()->Unit)  can be invoked like: a("Hello"){ println("xxxxx")}
    destruction:
        val (ca,cb) = PairC(12,false)   ( or data class)
             operator fun component1(): K
             operator fun component2(): V
             p("${c2.component1()} ${c2.component2()}")
         for ((key, value) in map) {
                println("key = $key, value = $value")
         }
    default value:
        class Greeter(val name: String?="unkown") {...
        fun test1(x: Any="asd"): Int {..
    definition:
        function:
            common
                fun sum(a: Int, b: Int): Int {
                    return a + b
                }
                fun sum(a: Int, b: Int) = a + b
                fun Int.isOdd2():Boolean= this%2!=0
                val cityCusEq: (Customer ,City)->Boolean ={customer, city ->  city==customer.city}
            fun filterValues(predicate: (V) -> Boolean)
            fun SomeClass.invo(){}    function extension
            fun isOdd(x: Int) = x % 2 != 0    ::isOdd     function reference
            override fun toString() = "Example Class"
            infix fun <A, B> A.kktt(that: B): Pair<A, B> = Pair(this, that)
                 val pair = "aaa" kktt "bbb"
            fun <T> T.apply(block: T.() -> Unit): T { block(); return this }  function context
                 HashMap().apply({this.put("xx","yy")})
        package:
            package xxx
        variable:
            val a: Int = 1
            var x = 5
        comment:
            like java,can be nested
        features:
            String template|Interpolation "$xx ${aa.bb} ${exp}"  reg:"""\d*"""
            null check: x?.invo1?.invo2     val x = y?.getX()?:3  (default value)
            type auto cast:
util:
    collection<T>:
        Iterable<T>:
            map(transform: (T) -> R): List<R>
            flatMap(transform: (T) -> Iterable<R>): List<R>
            filter(predicate: (T) -> Boolean): List<T>
            forEach(action: (T) -> Unit): Unit
            sumByDouble(selector: (T) -> Double): Double
            sumBy(selector: (T) -> Int): Int
            groupBy(keySelector: (T) -> K): Map<K, List<T>>
            partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>>
            fold(initial: R, operation: (acc: R, T) -> R): R
            logic:
                all(predicate: (T) -> Boolean): Boolean
                any(predicate: (T) -> Boolean): Boolean
                count(predicate: (T) -> Boolean): Int
                find(predicate: (T) -> Boolean): T?
                firstOrNull(predicate: (T) -> Boolean): T?
            T : Comparable<T>
                max(): T?
                min(): T?
                maxBy(selector: (T) -> R): T?
                minBy(selector: (T) -> R): T?
                sortedBy(selector: (T) -> R?): List<T>
                sortedByDescending(selector: (T) -> R?): List<T>
    Map<K,V>
        filterValues(predicate: (V) -> Boolean): Map<K, V>